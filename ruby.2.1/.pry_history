puts "hoge"
? puts
?
n{ i=0;j=1;n.times{j=i+i=j;i }.call(10)
  n{ i=0;j=1;n.times{j=i+i=j;i }.call(10)
n{ i=0;j=1;n.times{j=i+i=j};i }.call(10)
n
quit
n{ i=0;j=1;n.times{j=i+i=j;i }.call(10)
}
n{ i=0;j=1;n.times{j=i+i=j};i }.call(10)
def foo
quit
quir
quit
queen = 12
queen
QUEEN = 42
QUEEN
Queen = 12
Queen
KING = 13
KING = 42
TEAPOT = "tea".freez
TEAPOT = "tea".freeze
TEAPOT.capitalize!
TEAPOT = "coffee"
TEAPOT.capitalize!
42
-42
42_000_000
0b101010
052
0x2A
4.2
42e-1
42e-2
42e+2
42e+40
42e
42e+10
1/3r
1/3r * 3
42i
5+42i
42ri
"Alice found a bottle"
'Alice found a battle'
"Alice"
"#{name} found a bottle"
name = "Alice"
"#{name} found a bottle"
'#{name} found a bottle'
%!Alice found a bottle!
%Q{Alice found a bottle}
%q{Alice found a bottle}
<<EOS
Alice found a bottle
labeld "drink me!"
EOS
<<-EOS
Alice gound a bottle
labeld "drink me!"
EOS
<<-EOS
Alice gound a bottle
labeld "drink me!"
  EOS
<<EOS
labeld "drink me!"
  EOS
EOS
:alice
:"alice"
:'alice'
%s{alice}
alice.object_id
alice
:alice.object_id
:"alice".object_id
:'alice'.object_id
teapot = "tea"
teapot = 42
teapot
x, y ,z = 1, 2, 3
x
y
z
x, y = 1, 2, 3
x
y
x = 51
x+
x
x = 51
x += 1
x
quit
array = []
array = Array.new
array.push(1)
array << 2
array << "3"
array.kength
array.length
array.size
array[0]
array[1]
array[2]
array[3]
array.at(2)
array.at(-12)
array.at(-2)
array[1..2]
array.at(1..2)
array.delete(1)
array
array.derele_at(0)
array.delete_at(0)
array
array.clear
stack = []
stack.push("alice")
stack.push("in")
stack.push("wonderland")
stack.pop
stack
stack.pop
stack
queue = []
queue.push("alice")
queue.push("in")
queue.push("wonderland")
queue.shift
queue
queue.shift
array = 1..3
array
array = [1,2,3,4]
array.reverse
array
array.reverse!
array
array.reverse!
array.push(5)
array << 6
array.pop
array.rotate(2)
array.rotate(-2)
array
array.rotate(-2)
[1,5,3,2,0,-5],sort_by
[1,5,3,2,0,-5].sort_by
array = [1,5,3,2,0,-5]
array.sort_by
array.sort_by!
array
array.sort_by
array.sort
array.sort!
array
sort_bt
sort_by
array.sort_by
array = ["queen", "of", "hearts"]
array.shuffle
[1,2,3,4,5].sample(2)
[1,2,3,4,5].sample(3)
[1,2,3,4,5].sample(1)
array = [1,2,3,4,5,6]
array.index(3)
array.rindex(3)
array = [1,2,3,3,4,5,6]
array.rindex(3)
array.index(3)
array.index(10)
array = [1,1,2,2,3,3,4,4,4,4]
array.uniq
array
array.uniq
array.uniq!
array.uniq
array.uniq!
array = ["alice", "in", nil, "wonderland", nil].compact
array = ["alice", "in", nil, "wonderland", nil]
array.compact
array = ["alice", "in", nil, "wonderland", nil].compact!
array = ["alice", "in", nil, "wonderland", nil]
array.compact
array.compact!
array1 = ["queen", "of"]
array2 = ["hearts"]
array1.concat(array2)
array1
array1 = [:a, :b, :c]
array2 = [:x, :y]
array3 = [:p, :q, :r, :s]
array1.zip(array2, array3)
histpry
history
hash = {"jack" => 11, "queen" => 12, :king => 13}
hash.length
hash.size
hash["queen"]
hash[:queen]
hash[:king]
hash["jack"]
hash[:ace]
hash.keys
hash.values
hash[:ace] = 1
hash
hash[:ace]
hash.delete[:jack]
hash.delete["jack"]
hash.delete([:jack])
hash.delete(["jack"])
hash
hash.delete(:jack)
hash.delete("jack")
hash
hash.clear
hash
hash = {}
hash = Hash.new
{:jack => 11, :queen => 12, :king = 13}
{:jack => 11, :queen => 12, :king => 13}
{jack: 11, queen: 12, king: 13}
hash = Hash.new(:default)
hash[:ace]
{jack: 11, queen: 12, king: 13}.to_a
{jack: 11, queen: 12, king: 13}.flatten
{jack: 11, queen: 12, king: 13}.merge({ace: 1, king:14, joker: 15})
{jack: 11, queen: 12, king: 13}.invert
hist
Pry.config.history.file
quit
1..5
1...5
touch 12.range.rb
quit
Range.new(1,3)
Range.new(1, 3, true)
(1..5).size
(1...5).size
(1..Float::INFINITY).size
(-Float::INFINITY..Float::INFINITY).size
quit
'a'.succ
'$'.succ
'0'.succ
'あ'.succ
'aa'.succ
'az'.succ
(0..5).include(5)
(0..5).include?(5)
(0...5).include?(5)
('a'..'z').include?('alice')
('a'..'z').cover?('alice')
('a'..'z').cover?('zzz')
(1..5).first
(1...5).first
(1...5).first(2)
(1..5).last
(1...5).last
(1...5).last(2)
(0..10).step(3) {|i| puts i}
(0..10).step {|i| puts i}
quit
teapot = "tea"
teapot.capitarize
teapot.capitalize
teapot.uppercase
teapot.upcase
teapot
teapot.upcase!
teapot
teapot.downcase
teapot.downcase!
teapot
teapot.upcase.capitalize
teapot.upcase.capitalize.swapcase
teapot = "   tea   "
teapot.strip
teapot
teapot.lstrip
teapot.rstrip
quit
"Alice".chars
"Alice found\na bottle".lines
"queen of" + " hearts"
teapot = "tea"
teapot.concat("coffee")
teapot
teapot << "juice"
teapot
"Alice a bottle".insert(6, "found ")
"Alice".reverse
/regex/
"srting"
Regex.new("regex")
Regexp.new("regex")
"Alice in Wonderland" =~ /Wonderland/
"Alice in Wonderland" =~ / in /
"Alice in Wonderland" =~ /cheshire cat/
quit
"Alice in Wonderland" !~ /Wonderland/
"Alice in Wonderland" !~ / in /
"Alice in Wonderland" !~ /cheshire cat/
"abbbc".match(/ab*c/)
"ac".match(/ab*c/)
"ac".match(/ab+c/)
"ac".match(/ab{1,2}c/)
"abc".match(/ab{1,2}c/)
"abbc".match(/ab{1,2}c/)
"abbbc".match(/ab{1,2}c/)
"abc".match(/a.?c/)
"a0c".match(/a.?c/)
"a@c".match(/a.?c/)
"axxc".match(/a.?c/)
"Alice".match(/[A4a]lice/)
"4lice".match(/[A4a]lice/)
"alice".match(/[A4a]lice/)
"Ilice".match(/[A4a]lice/)
"Alice".match(/[^A4a]lice/)
"Ilice".match(/[^A4a]lice/)
"alice".match(/[a-z]lice/)
"Alice".match(/[a-z]lice/)
"Alice".match(/[A-Z]lice/)
"alice".match(/[A-Z]lice/)
"42".match(/[0-9]2/)
"A2".match(/[0-9]2/)
"2014/05/01".match(/\d{4}\/\d{2}\/\d{2}/)
"2014-05-01".match(/\d{4}\/\d{2}\/\d{2}/)
"2014/5/1".match(/\d{4}\/\d{2}\/\d{2}/)
"teapot".match(/(tea|coffee)pot/)
"coffeepot".match(/(tea|coffee)pot/)
"milkpot".match(/(tea|coffee)pot/)
"abcd".match(/a(bc)+d/)
"abcd".match(/a(bc|xy)+d/)
"axyd".match(/a(bc|xy)+d/)
"abcbcd".match(/a(bc|xy)+d/)
"axyxyd".match(/a(bc|xy)+d/)
"axybcd".match(/a(bc|xy)+d/)
"Alice".match(/^Alice/)
"**Alice**".match(/^Alice/)
"!@*+?".match(/\*\+\?/)
"Bob in Wonderland".sub(/^Bob/, "Alice")
"This       is   an   unecen         space  string".gsub(/\s+/, " ")
"This       is   an   uneven         space  string".gsub(/\s+/, " ")
"This       is   an   uneven         space  string".sub(/\s+/, " ")
"2014/05/01".match(/(\d{4})\/(\d{2})\/(\d{2})/)
$1
$2
$3
"2014/05/01".match(/(?<year>\d{4})\/(?<month>\d{2})\/(?<day>\d{2})/)
match_data[:year]
match_data
match_data = "2014/05/01".match(/(?<year>\d{4})\/(?<month>\d{2})\/(?<day>\d{2})/)
match_data[:year]
match_data[:month]
match_data[:day]
quit
42.class
100000000000000000000.class
42
-42.class
42_000_000
0b101010
052
0x2A
1/3r
42r
0.5r
0.33333r
2/4r == 1/2r
Rational(1,3)
Rational(42)
4.2
4.2.class
42e-1
0.42e+1
Complex(5,42)
42i
5+42i
42ri
42.to_f
42.to_r
42.to_c
0.25.to_r
42.195.to_i
1/3r.to_f
1/3r.to_f.to_r
"42".to_i
"42".to_f
"0.25".to_f
"0.25".to_r
"42.195".to_i
"Alice".to_i
"ありす".to_i
"４２".to_i
"ABC".to_i
"0xABC".to_i
Integer("42")
Integer("Alice")
42
answer = 42
-answer
--answer
1 + 1
1 - 1
1.0 + 1
1 + 1/3r
21 * 2
2.1 * 2.0
2.1 * 2
2 ** 2
2 ** 0.5
84 / 2
3 / 2
8.4 / 2.0
8.4 / 2
3.0 / 2
5 % 2
42 == 42
42.0 == 42
0.3333 < 1/3r
1.6.ceil
1.4.ceil
-1.6.ceil
-1.4.ceil
1.6.floor
1.4.floor
-1.6.floor
-1.4.floor
1.6.round
1.4.round
-1.6.round
-1.4.round
1.5.round
-1.5.round
1.6.truncate
1.4.truncate
-1.6.truncate
-1.4.truncate
42.abs
-42.abs
(-1+1i).abs
-4.abs2
42.integer?
42.0.integer?
0.zero?
4.zero?
o.nonzero?
0.nonzero?
42.nonzero?
24.gcd(4)
24.lcm(4)
24.gcdlcm(4)
quit
Time.now
local_time = Time new(2014, 4, 18, 5, 30, 0, '+09:00')
local_time = Time.new(2014, 4, 18, 5, 30, 0, '+09:00')
utc_time = Time.utc(2014, 4, 10, 5, 30, 0)
local_time = Time.new(2014, 4, 18, 5, 30, 0, '+09:00')
local_time.utc?
utc_time.utc?
local_time.year
local_time.month
local_time.day
local_time.hour
local_time.min
local_time.sec
local_time.yday
local_time.dst?
local_time.utc_offset
local_time.to_a
local_time.sunday?
local_time.monday?
local_time.tuesday?
local_time.wednesday?
local_time.thursday
local_time.thursday?
local_time.friday
local_time.friday?
local_time.sunday?
local_time.wday
time = Time.new(2014, 4, 18, 5, 30, 0, "+09:00")
time + 3600
time - 3600
past = Time.new(2014, 4, 18, 5, 30, 0, "+09:00")
future = Time.new(2014, 4, 18, 8, 30, 0, "+09:00")
past > future
past < future
past <=< future
past <=> future
future <=> past
past <=> past
quit
array = Array.new
array.push["Alice"]
array.push("Alice")
array + ["in", "wonderland"]
quit
require_relative '27.rabbit'
Rabbit.superclass
LopEar.superclass
Rabbit.new._to_s
Rabbit.new.to_s
["alice", "in", "wonderland"].to_s
quit
require_relative '27.rabbit'
Rabbit.new.to_s
LopEar.new(name: 'pyonkichi', color: :brown, length_of_ears: 5).to_s
quit
